var nodes = [
    {
        "Navn": "",
        "UnikID": 0,
        "Naboer": [
            "2"
        ],
        "Samlepost": "10.10.0.34/32",
        "Kant": [
            0
        ]
    },
    {
        "Navn": "S",
        "UnikID": 1,
        "Naboer": [
            "2",
            "5"
        ],
        "Samlepost": "341",
        "Kant": [
            0,
            0
        ]
    },
    {
        "Navn": "R",
        "UnikID": 2,
        "Naboer": [
            "0",
            "1",
            "4"
        ],
        "Samlepost": "10.12.0.0/22",
        "Kant": [
            0,
            0,
            0
        ]
    },
    {
        "Navn": "",
        "UnikID": 3,
        "Naboer": [],
        "Samlepost": "10.12.3.211/32",
        "Kant": []
    },
    {
        "Navn": "",
        "UnikID": 4,
        "Naboer": [
            "2",
            "5"
        ],
        "Samlepost": "192.168.3.10/32",
        "Kant": [
            0,
            0
        ]
    },
    {
        "Navn": "S",
        "UnikID": 5,
        "Naboer": [
            "1",
            "4"
        ],
        "Samlepost": "2052",
        "Kant": [
            0,
            0
        ]
    }
]

// returnerer et array med nodes og alle de mulige pathene
function findAllPaths(
    nodes // array med Noder
){
    nodes.forEach((node) => {

        //vi er bare interresert i paths mellom unnamed nodes
        if(node.Navn != ""){
            return
        }
        reachableNodes = findGoalNodes(nodes, node)

        reachableNodes.forEach((reachable) => {
        })
        console.log(node.UnikID, reachableNodes)
    })
}

//gjør et bfs søk fra noden og returnerer alle noder
//returnerer et array med alle noder som er mulig å dra til
function findGoalNodes(
    nodes, //array<Node>
    node // Node
){
    let queue = [Number(node.UnikID)]
    let visited = []

    while(queue.length != 0){
        const visiting = queue.shift()

        const visitingNaboer = nodes[visiting].Naboer

        visitingNaboer.forEach((nabo) => {
            if(visited.includes(Number(nabo)) != true){
                queue.push(Number(nabo))
                visited.push(Number(nabo))
            }
        })
    }

    return visited
}


findAllPaths(nodes)

//test the functions

runTests()

function runTests(){
    console.log("finding paths")
    //passFail(findGoalNodes(exampleNodes, exampleNodes[4]) == [4, 2, 5, 0, 1])
}

//prints passed/failed based on the input bool
function passFail(
    result //bool
){
    if(result === true){
        console.log("passed")
    }
    else if(result == false){
        console.error("failed")
    }
    else{
        throw new Error("input was neither true of false")
    }
}

var exampleNodes = [
    {
        "Navn": "",
        "UnikID": 0,
        "Naboer": [
            "2"
        ],
        "Samlepost": "10.10.0.34/32",
        "Kant": [
            0
        ]
    },
    {
        "Navn": "S",
        "UnikID": 1,
        "Naboer": [
            "2",
            "5"
        ],
        "Samlepost": "341",
        "Kant": [
            0,
            0
        ]
    },
    {
        "Navn": "R",
        "UnikID": 2,
        "Naboer": [
            "0",
            "1",
            "4"
        ],
        "Samlepost": "10.12.0.0/22",
        "Kant": [
            0,
            0,
            0
        ]
    },
    {
        "Navn": "",
        "UnikID": 3,
        "Naboer": [],
        "Samlepost": "10.12.3.211/32",
        "Kant": []
    },
    {
        "Navn": "",
        "UnikID": 4,
        "Naboer": [
            "2",
            "5"
        ],
        "Samlepost": "192.168.3.10/32",
        "Kant": [
            0,
            0
        ]
    },
    {
        "Navn": "S",
        "UnikID": 5,
        "Naboer": [
            "1",
            "4"
        ],
        "Samlepost": "2052",
        "Kant": [
            0,
            0
        ]
    }
]

